<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on LaTeX 教程</title>
    <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/</link>
    <description>Recent content in Docs on LaTeX 教程</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://localghost-blog.github.io/latex-tutorial/zh/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初次使用 LaTeX</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/getting-started-with-latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/getting-started-with-latex/</guid>
      <description>\(\)准备工作#使用$\LaTeX$前，你需要有一台已安装$\LaTeX$的电脑，或者前往The LaTeX Project官网下载并安装一个$\TeX$发行版。
如官网不方便访问，可以访问清华大学开源软件镜像站获取$\TeX$发行版，其中Windows系统或Linux系统使用TeX Live，而MacOS使用MacTeX。
或者通过命令行下载并安装$\TeX$发行版，如下：
Windows$ choco install texlive MacOS$ brew cask install mactex # 或者 $ brew cask install basictex Ubuntu$ apt install texlive # or $ apt install texlive-base 此外，也可以访问Overleaf等在线服务以联网使用$\LaTeX$。
以下以本地运行为例。
第一个$\LaTeX$文件#创建新文件如下。可以使用任意名字，但建议以.tex结尾。
% helloworld.tex \documentclass{article} \begin{document} Hello, World! \end{document} 打开命令行， 用命令 cd 切换至文件所在目录，然后运行xelatex。 编译成功后，你会在当前目录发现helloworld.pdf以及一些其它文件。
$ cd /path/to/your/folder $ xelatex helloworld # or xelatex helloworld.tex 若编译失败，则会显示错误信息，并停止编译。此时按ctrl-D(MacOS下为control-D)返回命令行。
代码结构#一个合法的$\LaTeX$代码需要正确格式以使编译程序处理。一般来说，任何一个$\TeX$文件需要以以下命令开始：</description>
    </item>
    
    <item>
      <title>多语言支持</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/international-language-support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/international-language-support/</guid>
      <description>\(\)多语言支持#现代的$\TeX$引擎，如XeTeX和LuaTeX，原生支持UTF-8编码。如下：
源代码#\documentclass{article} \begin{document} Français Português Español Føroyskt \end{document} 编译结果#Français Português Español Føroyskt然而非拉丁字母无法直接在$\LaTeX$中使用，如西里尔字母、希腊字母、阿拉伯字母以及东亚文字等。
我们主要介绍中文的支持，提供两种解决方案。
方案一：xeCJK宏包#xeCJK是一个XeLaTeX宏包，用于排版中日韩(CJK)文字，有以下功能：
分别设置CJK与英文字体； 自动忽略CJK文字间空格(保留其它空格)，允许在非标点汉字和英文字母间断行； 提供多种标点处理方式； 自动调整中英文间空白。 在引入宏包后，须指定CJK文字的字体，然后可以在文档中自由使用中日韩文字。
更多特性及设定见其文档。
源代码#\documentclass{article} \usepackage{xeCJK} \setCJKmainfont{SimSun} \begin{document} 汉语测试 \end{document} 编译结果#汉语测试方案二：ctex宏包与文档类#另一种方式是使用ctex宏包与文档类，其进一步封装了CJK，xeCJK，luatexja等宏包， 使得用户在排版时无须考虑排版引擎等细节。
注意事项：该方案会改变默认的页码位置，如果需要使用默认的页码位置，请在文档中使用以下命令：
\usepackage{fancyhdr} \pagestyle{fancy} \lfoot{} ctexart文档类\documentclass{ctexart} \begin{document} 少写两行太好用啦！ \end{document} ctex宏包\documentclass{article} \usepackage{ctex} \begin{document} 多了一行 \end{document} ctex会自动寻找中文字体。默认的字体如下：
Windows MacOS Linux XeLaTeX 中易字库 + 微软雅黑 华文字库 + 苹方 Fandol字库 LuaLaTeX 中易字库 + 微软雅黑 华文字库 + 苹方 Fandol字库 pdfLaTeX 中易字库 + 微软雅黑 不可用 不可用 也可以使用\setCJKmainfont{}命令来设置中文字体。</description>
    </item>
    
    <item>
      <title>LaTeX 文件内容</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/latex-file-content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/latex-file-content/</guid>
      <description>\(\)$\LaTeX$文件结构#在此前的代码结构一节中，我们初步介绍了$\LaTeX$文件的结构。以下是文件内容的示意图。
flowchart LRA(文件) --&gt; B(导言)A --&gt; C(正文)A --&gt; D(忽略)B --&gt; E(文档类型)B --&gt; F(宏包, 全局设定, 注释)C --&gt; G(开始)C --&gt; H(文字, 命令, 环境, 注释)C --&gt; I(结束)正文部分的内容由文字，命令，环境，注释组成。一般来说，文字会被按照原样处理为文档的内容，其余部分会按照$\LaTeX$的语法规则进行处理。我们将分别介绍这些部分的内容。
文字#空格#\n([ \t]*\n)+ -&amp;gt; 段落终止: 两个文段间的空行定义段落的终止，多个空行被视为一个空行。 (?&amp;lt;=\n)[ \t]+ -&amp;gt; 忽略, (?&amp;lt;!\n)([ \t]+|[ \t]*\n) -&amp;gt; 空格: 空白符，如空格键、tab键输入的字符皆视为空格，连续的多个空格视为一个空格。行头空格忽略不计，而单个换行符亦视为空格。 以下是一个例子：
源代码#It does not matter whether you enter one or several spaces after a word.</description>
    </item>
    
    <item>
      <title>常见环境</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/common-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/common-environments/</guid>
      <description>\(\)列表环境#列表环境有三种，分别是：
itemize：无序列表； enumerate：有序列表； description：描述列表。 列表的项以\item开头，后面可以跟着一个描述，描述的内容会被放在列表项的右边。 \item有可选参数[name]，用于指定列表项的名称，对于desription为必须项。例子见下：
源代码#\begin{enumerate} \item You can nest the list environments to your taste: \begin{itemize} \item But it might start to look silly. \item[-] With a dash. \end{itemize} \item Therefore remember: \begin{description} \item[Stupid] things will not become smart because they are in a list. \item[Smart] things, though, can be presented beautifully in a list. \end{description} \end{enumerate} 编译结果#You can nest the list environments to your taste:</description>
    </item>
    
    <item>
      <title>如何写出一个结构化的LaTeX文档</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/how-to-write-a-well-structured-latex-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/how-to-write-a-well-structured-latex-file/</guid>
      <description>\(\)文章结构#了解了如何输入文字内容后，我们可以尝试写出一个结构化的$\LaTeX$文档。
flowchart LRA(内容) --&gt; B(开端)A --&gt; C(正文)A --&gt; D(结尾)B --&gt; E(标题)B --&gt; F(前言)B --&gt; G(目录)C --&gt; H(章, 节, 小节)H --&gt; I(章节内容)D --&gt; J(附录)D --&gt; L(参考文献)D --&gt; M(索引)以上仅为示意图，可根据实际需要增加或删减部分。
标题#$\LaTeX$支持生成简单的标题页。
需要在导言区提供标题、作者和日期信息：
\documentclass{article} ... \title{标题\thanks{致谢}} \author{ 作者A\thanks{its@pku.edu.cn} \and 作者B\thanks{通讯作者} } \date{日期} \begin{document} \maketitle ... \end{document} 其中前两个命令是必须的(不用\title会报错；不用\author会警告)，而\date可选，不使用时默认为\today(生成当前日期)。
\title和\author可以使用\thanks命令来添加致谢信息，会像脚注一样出现在页面下方。 此外\author的参数可以使用\and来并列多个作者。
在信息给定后，就可以在正文区插入标题页：\maketitle。
目录与章节#一篇结构化、条理清晰的文档一定是层次分明的，可以通过命令分割为章、节、小节等：
\begin{document} \chapter{chapter 1} \section{section 1.</description>
    </item>
    
    <item>
      <title>排版数学公式</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/typesetting-math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/typesetting-math/</guid>
      <description>\(\)使用$\LaTeX$排版数学公式#为较好地支持排版数学公式，需要使用AMS-$\LaTeX$宏集。 AMS-$\LaTeX$宏集是一个包含了若干类和宏包的数学排版拓展，我们主要使用amsmath宏包。 以下的命令总是假定已引用该宏包。
行内公式#数学公式的排版分为两种：其一是与文字混排，称为行内公式；其二是单独成行，称为行间公式。
行内公式是由一对$包裹($\TeX$语法)或是由\(与\)包裹($\LaTeX$语法)的环境：
源代码#设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则$a^2+b^2=c^2$。 编译结果#设直角三角形的两条直角边长度分别为$a$和$b$，斜边长度为$c$，则$a^2+b^2=c^2$。也可以使用\begin{math}和\end{math}来包裹，甚至可以混用语法：$a\)。 但这两种都不推荐。
我们建议全部使用$\TeX$语法(即使用$包裹)，这样便于阅读。
行间公式#若需要将较长的公式独立于段落展示，需要使用环境equation：
源代码#设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \begin{equation} a^2 + b^2 = c^2 \end{equation} 编译结果#设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \begin{equation} a^2 + b^2 = c^2 \end{equation}equation环境会为公式生成编号，可以使用\label, \ref进行引用。 \tag{}可为公式修改编号。
如果不需要编号，可以使用\notag命令。此外也有更直接的方式：
使用equation*环境；
使用displaymath环境；
使用一对$$包裹($\TeX$语法)或者用\[与\]包裹($\LaTeX$语法)。
注意事项：请尽量不要使用$$包裹来生成行间公式，更不要混合使用语法。其并不支持如fleqn等命令(见文档导言)。此外还有其它支持问题，可以参考讨论Why is \[ ... \] preferable to $$ ... $$?。
源代码#设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \begin{equation*} a^2 + b^2 = c^2 \end{equation*} 或者更简单一些： \[ a^2 + b^2 = c^2 \] 编译结果#设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \[ a^2 + b^2 = c^2 \] 或者更简单一些： \[ a^2 + b^2 = c^2 \]数学模式#被数学环境包裹的片段进入数学模式，其与文本模式有差异，如：</description>
    </item>
    
    <item>
      <title>编辑器推荐</title>
      <link>https://localghost-blog.github.io/latex-tutorial/zh/docs/latex-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://localghost-blog.github.io/latex-tutorial/zh/docs/latex-editor/</guid>
      <description>\(\)编辑器推荐#一个好用的$\LaTeX$编辑器无疑会极大地提高输入和编译效率，也可以让使用者有一个好的心情，不用一直面对终端手动输入指令(虽然部分人也喜欢这么做)。
本篇推荐两个笔者长期使用的编辑器，并介绍部分特性与使用方法。 本文并不致力于写成编辑器使用指南，因此主要介绍其中与$\LaTeX$相关的部分。
此外，你也可以使用你喜欢的编辑器探索如何提升$\LaTeX$文档的编辑体验。
Visual Studio Code#Visual Studio Code (简称VS Code)是由微软公司开发的跨平台免费开源的编辑器，主要用于编写程序，预设支持多数常用语言，也包括$\LaTeX$。 在2021年问答网站Stack Overflow的开发环境调研中，其获得了71.06%的推荐率，远超其后的Visual Studio (33.03%)等。
VS Code支持通过扩展增强功能，在其扩展商店中的LaTeX Workshop可以极大地提升编辑器中$\LaTeX$文件的编辑和编译效率。
以下介绍其主要功能。更详细的介绍可以查看Features和其Wiki。
一般代码支持#支持$\LaTeX$, $\LaTeX$3, Bib$\TeX$语法高亮、代码折叠、代码格式化。
自动编译#LaTeX Workshop默认会在你保存文件时自动编译$\LaTeX$文档， 因此可以告别生成引用、文献、索引等多次编译的烦恼。
如果使用\input, \include来形成文件树，其会智能地在保存树中任意文件时重新编译主文件。
此外，可以选择删除编译过程中出现的辅助文件。
该设定可以关闭。
PDF预览和SyncTeX支持#LaTeX Workshop支持在VS Code内与外部PDF查看器实时预览编译出的PDF文档。
此外，支持通过SyncTeX从文档中的\label和\ref处跳转PDF至相应部分，或是从PDF任意部分跳转至生成该部分的一行(同样支持访问文件树)。
Snippets, Shortcuts 与 IntelliSense#智能提示宏命令(包含可能的参数类型)，\cite和\ref引用内容，以及\input, \include, \includegraphics等文件导入路径，可以选择并按tab键补完。
智能生成列举环境中的\item，
更方便地给文本提供\emph等样式。
此外，可以通过VS Code自定义代码片段，形成适合个人的代码片段。
数学公式和TikZ绘图，图片预览#将光标置于数学公式与TikZ绘图，或图片插入处可以看到渲染效果。
错误分析#将编译报错显示于文件中。
大纲，代码片段插入#在资源管理器-&amp;gt;大纲处(或$\TeX$-&amp;gt;STRUCTURE处)可以看到树状组织的全部章节和标签，支持点击跳转。
在$\TeX$-&amp;gt;SNIPPET VIEW处可以根据符号插入对应的命令，以及常用的TikZ绘图片段。
其它插件#你也可以在扩展商店搜索自己喜欢的扩展。 如笔者会使用hypersnips(借助Vim中的王牌插件Ultisnips灵感创作)以根据上下文(context)快速自动展开代码片段。 由于其目前为beta版，存在部分问题，故此处不介绍。</description>
    </item>
    
  </channel>
</rss>
