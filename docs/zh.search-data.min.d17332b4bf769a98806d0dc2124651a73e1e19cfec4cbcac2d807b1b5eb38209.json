[{"id":0,"href":"/latex-tutorial/zh/docs/getting-started-with-latex/","title":"初次使用 LaTeX","section":"Docs","content":"\r\\(\\)\r准备工作\r#\r使用$\\LaTeX$前，你需要有一台已安装$\\LaTeX$的电脑，或者前往The LaTeX Project官网下载并安装一个$\\TeX$发行版。\n如官网不方便访问，可以访问清华大学开源软件镜像站获取$\\TeX$发行版，其中Windows系统或Linux系统使用TeX Live，而MacOS使用MacTeX。\n或者通过命令行下载并安装$\\TeX$发行版，如下：\nWindows\r$ choco install texlive MacOS\r$ brew cask install mactex # 或者 $ brew cask install basictex Ubuntu\r$ apt install texlive # or $ apt install texlive-base 此外，也可以访问Overleaf等在线服务以联网使用$\\LaTeX$。\n以下以本地运行为例。\n第一个$\\LaTeX$文件\r#\r创建新文件如下。可以使用任意名字，但建议以.tex结尾。\n% helloworld.tex \\documentclass{article} \\begin{document} Hello, World! \\end{document} 打开命令行， 用命令 cd 切换至文件所在目录，然后运行xelatex。 编译成功后，你会在当前目录发现helloworld.pdf以及一些其它文件。\n$ cd /path/to/your/folder $ xelatex helloworld # or xelatex helloworld.tex 若编译失败，则会显示错误信息，并停止编译。此时按ctrl-D(MacOS下为control-D)返回命令行。\n代码结构\r#\r一个合法的$\\LaTeX$代码需要正确格式以使编译程序处理。一般来说，任何一个$\\TeX$文件需要以以下命令开始：\n\\documentclass{...} 该命令指定了PDF文档的类型(如文章、书籍、演示文稿等)。 在此之后，可以添加命令来改变文档的样式，或者加载宏包(package)以获取拓展功能。 加载宏包的命令如下：\n\\usepackage{...} 完成所有准备工作后，用以下命令进入正文内容。正文内容以前的部分称为导言(preamble)。\n\\begin{document} 正文内容包括$\\LaTeX$命令以及普通文本。 在正文结束后，用以下命令结束文档。\n\\end{document} 该命令后的任何字符将被忽略。\n在LaTeX 文件内容一章会具体展开代码结构和内容的讨论，在此之前我们先介绍一些常用的文档类型。\n文档导言\r#\r文档类型: 文档类型由命令\\documentclass指定: \\documentclass[options]{class} 其中class是文档类型的名称，控制整篇文档的大致风格，而[]内的部分提供一些参数的调整，可以如前文样例一样省去或置空。常用的名称和参数见以下表格： class 描述 article 文章格式，常用于科技论文、短篇报告、说明文档等。 report 报告格式，适用分数个章节的长篇报告，或是短篇书籍、博士论文等。 book 书籍格式。 beamer 演示文稿格式，适于做报告时配合使用。 options 描述 (\\d+)pt 设置正文主要字体大小。如12pt，默认为10pt。 (\\w+)paper 设置页面大小。默认为letterpaper(8.5in$\\times$11in，约合21.6cm$\\times$28.0cm)。其它可选值有a5paper，b5paper，executivepaper及legalpaper等。 fleqn 行间公式左置。默认居中。 leqno 公式编号左置。默认居右。 (no)?titlepage 设置命令\\maketitle是否生成单独页。article默认为notitlepage，report，book默认为titlepage。 (one|two)column 单/双列排版。默认为单列。 (one|two)side 单/双面排版。双面时奇偶页页眉页脚及页边距不同。artcle，report默认为单面，book默认为双面 以下是一个合法(但没必要)的文档类型命令\n\\documentclass[10pt, letterpaper, titlepage, onecolumn, twoside]{book} 宏包: 编写文档时偶尔会发现部分需求难以用最基本的$\\LaTeX$实现，例如插入图片，文字上色、高亮代码等。此时一般可以通过使用宏包来简单实现。 宏包用以下命令调用：\n\\usepackage[options]{package} % 或者 \\usepackage[options]{package1, package2, ...} 其中package是宏包的名称，options是宏包的参数。可以一次性调用多个宏包，但参数作用于所有宏包。\n现代的$\\TeX$发布版有大量的预安装宏包，可以使用命令texdoc来阅读已安装宏包的文档：\n$ texdoc package "},{"id":1,"href":"/latex-tutorial/zh/docs/international-language-support/","title":"多语言支持","section":"Docs","content":"\r\\(\\)\r多语言支持\r#\r现代的$\\TeX$引擎，如XeTeX和LuaTeX，原生支持UTF-8编码。如下：\n源代码\r#\r\\documentclass{article} \\begin{document} Français Português Español Føroyskt \\end{document} 编译结果\r#\rFrançais Português Español Føroyskt\r然而非拉丁字母无法直接在$\\LaTeX$中使用，如西里尔字母、希腊字母、阿拉伯字母以及东亚文字等。\n我们主要介绍中文的支持，提供两种解决方案。\n方案一：xeCJK宏包\r#\rxeCJK是一个XeLaTeX宏包，用于排版中日韩(CJK)文字，有以下功能：\n分别设置CJK与英文字体； 自动忽略CJK文字间空格(保留其它空格)，允许在非标点汉字和英文字母间断行； 提供多种标点处理方式； 自动调整中英文间空白。 在引入宏包后，须指定CJK文字的字体，然后可以在文档中自由使用中日韩文字。\n更多特性及设定见其文档。\n源代码\r#\r\\documentclass{article} \\usepackage{xeCJK} \\setCJKmainfont{SimSun} \\begin{document} 汉语测试 \\end{document} 编译结果\r#\r汉语测试\r方案二：ctex宏包与文档类\r#\r另一种方式是使用ctex宏包与文档类，其进一步封装了CJK，xeCJK，luatexja等宏包， 使得用户在排版时无须考虑排版引擎等细节。\n注意事项：该方案会改变默认的页码位置，如果需要使用默认的页码位置，请在文档中使用以下命令：\n\\usepackage{fancyhdr} \\pagestyle{fancy} \\lfoot{} ctexart文档类\r\\documentclass{ctexart} \\begin{document} 少写两行太好用啦！ \\end{document} ctex宏包\r\\documentclass{article} \\usepackage{ctex} \\begin{document} 多了一行 \\end{document} ctex会自动寻找中文字体。默认的字体如下：\nWindows MacOS Linux XeLaTeX 中易字库 + 微软雅黑 华文字库 + 苹方 Fandol字库 LuaLaTeX 中易字库 + 微软雅黑 华文字库 + 苹方 Fandol字库 pdfLaTeX 中易字库 + 微软雅黑 不可用 不可用 也可以使用\\setCJKmainfont{}命令来设置中文字体。\n更多特性及设定见其文档。\n字体使用\r#\r使用本机安装字体\r#\rXeTeX通常使用fontconfig库查找和调用字体，因此可以用fc-list命令显示可用的字体。 在命令行运行以下命令：\n$ fc-list \u0026gt; fontlist.txt 可将系统中所有安装的字体列表存入fontlist.txt文件中。 而可用于CJK字体参数的字体名可用以下命令：\n$ fc-list -f \u0026#34;%{family}\\n\u0026#34; :lang=zh \u0026gt; zhfont.txt 以下是部分预装字体 Windows\r$ fc-list -f \u0026#34;%{family}\\n\u0026#34; :lang=zh 方正姚体,FZYaoTi 黑体,SimHei 微软雅黑,Microsoft YaHei 华文仿宋,STFangsong 华文楷体,STKaiti 华文隶书,STLiti 幼圆,YouYuan MacOS\r$ fc-list -f \u0026#34;%{family}\\n\u0026#34; :lang=zh 苹方-简,蘋方-簡,PingFang SC .苹方-繁,.蘋方-繁,.PingFang TC 苹方-繁,蘋方-繁,PingFang TC 黑体-繁,黑體-繁,Heiti TC,黒体-繁,Heiti-번체 .苹方-繁,.蘋方-繁,.PingFang TC 黑体-繁,黑體-繁,Heiti TC,黒体-繁,Heiti-번체 Ubuntu\r$ fc-list -f \u0026#34;%{family}\\n\u0026#34; :lang=zh AR PL Mingti2L Big5,文鼎ＰＬ細上海宋 AR PL KaitiM GB,文鼎ＰＬ简中楷 AR PL KaitiM Big5,文鼎ＰＬ中楷 AR PL SungtiL GB,文鼎ＰＬ简报宋 Droid Sans Fallback 以Windows系统为例，以下使用黑体方式均合法。\n\\setCJKmainfont{黑体} % 或者 \\setCJKmainfont{SimHei} 使用本地字体\r#\r若要使用本地字体，可以使用\\setCJKmainfont[options]{fontname}命令，其中参数options为本地字体相对命令行当前路径的路径，fontname为字体名。\n使用样例如下：\n% folder/src/main.tex \\documentclass{ctexart} \\setCJKmainfont[Path=fonts/]{LXGWWenKaiScreen} % located in folder/fonts/ \\begin{document} 叽里呱啦。 \\end{document} foo@bar:folder$ xelatex src/main "},{"id":2,"href":"/latex-tutorial/zh/docs/latex-file-content/","title":"LaTeX 文件内容","section":"Docs","content":"\r\\(\\)\r$\\LaTeX$文件结构\r#\r在此前的代码结构一节中，我们初步介绍了$\\LaTeX$文件的结构。以下是文件内容的示意图。\nflowchart LR\rA(文件) --\u003e B(导言)\rA --\u003e C(正文)\rA --\u003e D(忽略)\rB --\u003e E(文档类型)\rB --\u003e F(宏包, 全局设定, 注释)\rC --\u003e G(开始)\rC --\u003e H(文字, 命令, 环境, 注释)\rC --\u003e I(结束)\r正文部分的内容由文字，命令，环境，注释组成。一般来说，文字会被按照原样处理为文档的内容，其余部分会按照$\\LaTeX$的语法规则进行处理。我们将分别介绍这些部分的内容。\n文字\r#\r空格\r#\r\\n([ \\t]*\\n)+ -\u0026gt; 段落终止: 两个文段间的空行定义段落的终止，多个空行被视为一个空行。 (?\u0026lt;=\\n)[ \\t]+ -\u0026gt; 忽略, (?\u0026lt;!\\n)([ \\t]+|[ \\t]*\\n) -\u0026gt; 空格: 空白符，如空格键、tab键输入的字符皆视为空格，连续的多个空格视为一个空格。行头空格忽略不计，而单个换行符亦视为空格。 以下是一个例子：\n源代码\r#\rIt does not matter whether you enter one or several spaces after a word. An empty line starts a new paragraph. 编译结果\r#\rIt does not matter whether you enter one or several spaces after a word.\nAn empty line starts a new paragraph.\n单词间距与断行\r#\r在进行西文排版时，为了使文字达到右边界，$\\LaTeX$会适度调整单词间距。为提高可读性，其也会在句尾稍加间距。$\\LaTeX$会自动选择断行位置。若在空格处断行，会舍去空格生成的间距；若在词中断行，会生成连接符。\n$\\LaTeX$的默认句终止符为句号.，问号?与感叹号!。若句号紧随大写字母，则其不会处理为语句终止，这是因为句号常出现于单词缩写中，如Q.E.D.。\n你可以以特殊命令改变当前空格和句号的规则。 如~会生成不调整间距，亦不断行的空格。 而命令\\@则会指定其紧随的句号为语句终止，即使其前为大写字母。\n例子见下\n源代码\r#\rMr.~Smith was happy to see her\\\\ cf.~Fig.~5\\\\ I like BASIC\\@. What about you? 编译结果\r#\rMr. Smith was happy to see her\ncf. Fig. 5\nI like BASIC. What about you?\n以下命令禁止句尾的额外间距：\n\\frenchspacing 这在非英文语言中是常见的，若你使用该命令，命令\\@非必要。\n特殊字符\r#\r保留字符\r#\r多数字符在$\\LaTeX$中为其本义，但以下字符有特殊用途：\n# $ % ^ \u0026 _ { } ~ \\\r其中$，^，_用于数学公式排版，\u0026amp;用于表格排版，~用途见上，%用于注释。 若想在文档中使用其本义，须在其前面加上\\，如\\$。\\为例外，需要使用命令\\textbackslash(在数学环境为\\backslash)。细表见下：\n# $ % ^ \u0026amp; _ { } ~ \\ \\# \\$ \\% \\^{} \\\u0026amp; \\_ \\{ \\} \\~{} \\textbackslash (\\backslash) 引号\r#\r在$\\LaTeX$不能直接使用引号，单引号‘和’分别用`和'输入；双引号则用``和''输入。在使用ctex宏包或文档类时，中文引号可以直接输入。\n源代码\r#\r``Please press the `x\u0026#39; key.\u0026#39;\u0026#39; ##international-language-support/#使用本地字体 编译结果\n\u0026ldquo;Please press the \u0026lsquo;x\u0026rsquo; key.\u0026rdquo;\n连字与破折号 (-)\r#\r$\\LaTeX$按连续-的个数提供3种“横线”： 单个-用来组成复合词， 连续两个-用来连接数字表示范围， 连续三个-用来连接单词，语义上类似破折号。\n源代码\r#\rdaughter-in-law, X-rated\\\\ pages 13--67\\\\ yes---or no? \\\\ $0$, $1$ and $-1$ 编译结果\r#\rdaughter-in-law, X-rated\npages 13–67\nyes—or no?\n$0$, $1$ and $-1$\n斜杠 (/)\r#\r在两个单词间加入斜杠/会使编译器将其视为一个单词，如read/write。 但在排版时也会禁止在行尾生成连字符，因此可能出现错误‘overfull’。 解决方案是改用\\slash。尽管如此，普通的/仍然会在表示比例时使用，如5 MB/s.\n度数符号 ($^\\circ$)\r#\r在纯净\\LaTeX中，使用$^\\circ$表示度数。\nIt\u0026#39;s $-30\\,^{\\circ}\\mathrm{C}$. I will soon start to super-conduct. It\u0026rsquo;s ${-30,}^{\\circ}$C. I will soon start to super-conduct.\n而宏包textcomp提供了\\textdegree和\\textcelsius等用于方便地表示度数。\n源代码\r#\r30 \\textcelsius{} is 86 \\textdegree{F}. 编译结果\r#\r30 $\\text{\\textdegree}$C is 86 $\\text{\\textdegree}$F.\r命令\r#\r$\\LaTeX$ 命令以反斜杠\\开头，大小写敏感，有以下两种形式：\n\\\\[a-zA-Z]+\\*?([...]|{...})*： 在反斜杠后紧随若干字母，然后终止于非字母。 部分命令可以带星号，与不带星号的命令有差异。 部分命令提供以[]或{}包围的若干参数。 一般来说，[]为可选参数，{}为必须参数，不可以随意调换参数的顺序。 此外，一般来说可选参数会在必须参数的前面。 \\\\[^a-zA-Z]：由反斜杠及紧随的一个非字母组成。 注意事项：\n命令后的空格会被忽略。若想在命令后间隔，可以使用空参数{}加上空白符，或是用使用~，或\\ (反斜杠加空格)。\n如果未使用{}包围必须参数，可能出现不可预料的结果。大体来说有两种情况：\n以下一条命令/非空白字符作为参数。对于数学环境中的分式\\frac{}{}，如不使用{}包围，例如\\frac \\alpha \\beta，编译器会将其认为\\frac{\\alpha}{\\beta}。\n对其后的所有内容产生作用。如\\bfseries{}，其会加粗命令后的所有内容，截至\\bfseries所在环境结束。如\\text{\\bfseries bold} normal会加粗bold。\n请不要省去必须参数，除非你知道如此做的后果。\n源代码\r#\rNew \\TeX users may miss whitespaces after a command. % renders wrong Experienced \\TeX\\ users are \\TeX perts, and know how to use whitespaces. % renders correct 编译结果\r#\rNew $\\TeX$users may miss whitespaces after a command. Experienced $\\TeX$ users are $\\TeX$perts, and know how to use whitespaces.\r第2类命令分为以下几种类型：\n\\#, \\$, \\%, \\^{}, \\\u0026amp;, \\_, \\{, \\}, \\~{}：转义为反斜杠后的特殊字符；\n\\!, \\,, \\:, \\;, \\ ：转义为空格；具体宽度如下：\n\\! \\, \\: \\; \\ \\quad -3 3 4 5 6 18(与M的宽度相同) \\(, \\), \\[, \\]：分别为行内公式的开始与结束，以及行间公式的开始与结束；\n\\|：数学公式中为$\\|$；\n\\`, \\', \\^, \\~, \\=, \\., \\\u0026quot;：重音符，效果如下：\n\\`o \\'o \\^o \\~o \\=o \\.o \\\u0026quot;o $\\`o$ $\\'o$ $\\^o$ $\\~o$ $\\=o$ $\\.o$ $\\\u0026quot;o$ \\\\：结束当前行\n\\@：见单词间距与断行；\n\\-：指定断词位置；\n手动断行与断页\r#\r我们可以使用\\\\, \\newline来手动断行(在tabular等环境中为\\\\或\\cr)。其中\\\\有可选参数[length]，代表额外的垂直间距。\n断页的命令有两个：\\newpage, \\clearpage。区别在于：在双栏排版中\\newpage另起一栏，而\\clearpage另起一页。\n环境\r#\r\\begin{([a-zA-Z]+\\*?)}([...]|{...})* ... \\end{\\1} -\u0026gt; 环境：环境是一种特殊的命令，以\\begin{envname}开头，以\\end{envname}结尾，其中envname为环境名称，由字母组成，前后须相同。部分环境名支持在字母后面带星号，与不带星号的环境有差异。\n环境用于令一些效果在局部生效，或是生成特殊的文档元素，常见环境会之后详细介绍。\n注释\r#\r%.*\\n[ \\t]* -\u0026gt; 注释: 注释以%开头，截至行尾。所有字符皆被忽略，也包括下一行开头的空格。\n源代码\r#\rThis is an % stupid % Better: instructive \u0026lt;---- example: Supercal% ifragilist% icexpialidocious 编译结果\r#\rThis is an example: Supercalifragilisticexpialidocious.\r%可用于分隔不可以换行的环境。\n多行注释\r#\r除了连续多行开头使用%，还有两种方案来更优雅地实现多行注释。\n\\iffalse与\\fi：编译器会忽略\\iffalse和\\fi之间的所有内容。该命令允许嵌套使用。 如\n源代码\r#\r前面 \\iffalse 看不到 \\iffalse 看不到 \\fi 也看不到 \\fi 后面 编译结果\r#\r前面后面\r\\begin{comment}与\\end{comment}：编译器会忽略\\begin{comment}和\\end{comment}之间的所有内容。但是，该命令不允许嵌套，其会寻找\\begin{comment}后的第一个\\end{comment}作为命令的终止。\n注意事项：该命令需要使用宏包comment或verbatim。\n源代码\r#\r前面 \\begin{comment} 看不到 \\begin{comment} 看不到 \\end{comment} 也看不到 % \\end{comment} 若不注释，编译器会在该行报错 后面 编译结果\r#\r前面 也看不到后面1\n此处“也看不到”与“后面”间没有空格，是由于ctex的空格处理机制，若使用英文，可以看到单词间有空格，来源于注释前的换行符。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n逐字输出(verbatim)\r#\r环境verbatim用于逐字输出，将环境中的所有字符输出为原始字符，不会根据$\\LaTeX$的规则进行转义；而verbatim*会将空格显示为“⎵”。\n\\verb\\*?([^a-zA-Z\\* \\s])(.*?)\\1：需要简短地使用逐字输出，可使用\\verb命令，其将紧邻的字符视为起始符与终止符，其间的字符将被输出为原始字符。带星号的会将空格显示为“⎵”。\n起始符与终止符为字母、空格、星号以外的字符，一般使用|符号。\n源代码\r#\rThe \\verb|\\ldots| command \\ldots \\begin{verbatim} 10 PRINT \u0026#34;HELLO WORLD \u0026#34;; 20 GOTO 10 \\end{verbatim} 编译结果\r#\rThe \\ldots command $\\ldots$\n10 PRINT \u0026quot;HELLO WORLD \u0026quot;;\n20 GOTO 10\n源代码\r#\r\\begin{verbatim*} the starred version of the verbatim environment emphasizes the spaces in the text \\end{verbatim*} \\verb*|like this :-) | 编译结果\r#\rthe⎵starred⎵version⎵of\nthe⎵⎵⎵⎵⎵⎵verbatim\nenvironment⎵emphasizes\nthe⎵spaces⎵⎵⎵in⎵the⎵text\nlike⎵⎵⎵this⎵:-)⎵\n"},{"id":3,"href":"/latex-tutorial/zh/docs/common-environments/","title":"常见环境","section":"Docs","content":"\r\\(\\)\r列表环境\r#\r列表环境有三种，分别是：\nitemize：无序列表； enumerate：有序列表； description：描述列表。 列表的项以\\item开头，后面可以跟着一个描述，描述的内容会被放在列表项的右边。 \\item有可选参数[name]，用于指定列表项的名称，对于desription为必须项。例子见下：\n源代码\r#\r\\begin{enumerate} \\item You can nest the list environments to your taste: \\begin{itemize} \\item But it might start to look silly. \\item[-] With a dash. \\end{itemize} \\item Therefore remember: \\begin{description} \\item[Stupid] things will not become smart because they are in a list. \\item[Smart] things, though, can be presented beautifully in a list. \\end{description} \\end{enumerate} 编译结果\r#\rYou can nest the list environments to your taste:\n•\tBut it might start to look silly.\n-\tWith a dash.\nTherefore remember:\nStupid things will not become smart because they are in a list.\nSmart things, though, can be presented beautifully in a list.\n注意事项：列表环境可以如上例一样嵌套，但环境itemize及enumerate的嵌套层数至多为4层，其中itemize中的\\item对应的命令为\\labelitemi 至 \\labelitemiv，而enumerate中的\\item对应的命令为\\labelenumi 至 \\labelenumiv。 其代表的符号可以使用texdef查找：\n$ texdef -t latex -f \\labelitemi \\labelitemii \\labelitemiii \\labelitemiv 我们可以更改默认的列表样式。 在纯净$\\LaTeX$环境中，可以使用\\renewcommand{command}{symbol}命令，例如\\rewnewcommand{\\labelitemi}{\\dag}将第1层itemize的\\item显示为\\dag($\\dag$)。\n宏包enumitem给出了方便地更改默认列表样式的方法，或仅修改当前的列表环境，也可以设置其它参数，见其文档。\n对齐环境\r#\r环境center, flushleft, flushright可以用于对齐文本，例如：\n源代码\r#\r\\begin{flushleft} This text is\\\\ left-aligned. \\LaTeX{} is not trying to make each line the same length. \\end{flushleft} \\begin{flushright} This text is right-\\\\aligned. \\LaTeX{} is not trying to make each line the same length. \\end{flushright} \\begin{center} At the centre\\\\of the earth \\end{center} 编译结果\r#\rThis text is left-aligned. $\\LaTeX$ is not trying to make each line the same length.\rThis text is right- aligned. $\\LaTeX$ is not trying to make each line the same length.\rAt the centre of the earth\r此外，可用\\centering, \\raggedright, \\raggedleft等命令来设置文本的对齐方式。 区别在于环境会在上下文产生额外间距，而命令仅改变对齐方式。\n引文环境\r#\r$\\LaTeX$提供了quote和quotation两种引文环境，其中quote适于引用短文字，首行不缩进；quotation适用于引用若干段文字，首行缩进。 此外，引文环境相比一般文字有额外的左右缩进。\n源代码\r#\rFrance is Bacon: \\begin{quote} Knowledge is power. \\end{quote} 编译结果\r#\rFrance is Bacon:\nKnowledge is power.\n源代码\r#\r《孔雀东南飞》： \\begin{quotation} 孔雀东南飞，五里一徘徊。 十三能织素，十四学裁衣， 十五弹箜篌，十六诵诗书。 十七为君妇，心中常苦悲。 \\end{quotation} 编译结果\r#\r《孔雀东南飞》：\n孔雀东南飞，五里一徘徊。\n十三能织素，十四学裁衣， 十五弹箜篌，十六诵诗书。 十七为君妇，心中常苦悲。\n摘要环境\r#\r摘要环境abstract默认仅在文档类article, report中可用，一般紧跟\\maketitle命令。 若指定titlepage选项，则单独成页；若否，单栏排版时相当于居中标题与quotation环境，双栏排版时相当于\\section*中的一节。\n定理环境\r#\r在使用$\\LaTeX$排版数学或其它科技文档时， 会大量使用定理、证明等内容，但定理环境不仅限于此。 在写其它文档时，如剧本等，我们也可以灵活使用定理环境。 $\\LaTeX$提供命令\\newtheorem来定义定理环境：\n\\newtheorem{envname}{title}[section-level] % or \\newtheorem{envname}[counter]{title} 其中envname为定理环境名称，title为定理标题，section-level为章节层级，见章节层级，counter为定理计数器名称。\n注意事项：\\newtheorem的出现位置应早于其定义环境的实例，可以出现在正文区，但一般会放在导言区。\n若选用第一种定义，定理的序号(计数器)为章节名的下一级序号(计数器)。\n在定义好定理环境后，就可以使用环境了。定理环境提供可选参数options\n\\begin{envname}[options] ... \\end{envname} 效果见下\n源代码\r#\r\\newtheorem{theorem}{Theorem}[section] \\section{section name} \\begin{theorem} All triangles are isosceles. \\end{theorem} \\begin{theorem}[This is TRUE!] All isosceles are triangles. \\end{theorem} 编译结果\r#\r1 section name\r#\rTheorem 1.1 All triangles are isosceles.\nTheorem 1.2 (This is TRUE!) All isosceles are triangles.\n例中命令新建了一个名为theorem的计数器。 此时如果需要新建一个和theorem共享编号的定理环境，可以使用\n\\newtheorem{proposition}[theorem]{Proposition} 注意事项：一般来说我们会使用其它新建的定理名作为counter的参数。请尽量不要使用章节层级名等作为counter参数。\n使用amsthm宏包定制定理环境\r#\r宏包amsthm提供了\\theoremstyle来支持定理格式的切换，在\\newtheorem前使用。\namsthm预定义了三种格式用于\\theoremstyle：\nplain：与$\\LaTeX$原始格式相同，即粗体标签，斜体内容\ndefinition：使用粗体标签、正体内容\nremark：使用斜体标签、正体内容\n此外amsthm支持带星号的\\newtheorem*{envname}{title}定义不带序号的定理环境。\n注意事项：amsthm会将定理环境的可选参数内容以正体(而非粗体)显示，此外，会在标签后加上一个句号。\n源代码\r#\r\\newtheorem*{Nick}{Nick} \\newtheorem*{Doctor}{Doctor} \\begin{Nick} When I came back from New York I was disgusted. \\end{Nick} \\begin{Nick}[CONT\u0026#39;D] Disgusted... with everyone, and everything... Only one man was exempt from my disgust. \\end{Nick} \\begin{Doctor} One man...? Mr. Carraway? \\end{Doctor} \\begin{Nick}[whispers] Gatsby... \\end{Nick} 编译结果\r#\rNick. When I came back from New York I was disgusted.\nNick (CONT\u0026rsquo;D). Disgusted\u0026hellip; with everyone, and everything\u0026hellip; Only one man was exempt from my disgust.\nDoctor. One man\u0026hellip;? Mr. Carraway?\nNick (whispers). Gatsby\u0026hellip;\n此外，amsthm也可以使用\\newtheoremstyle来自定义定理格式，参见其文档。\namsthm的证明环境\r#\ramsthm还提供了一个proof环境用于排版定理的证明过程。proof环境基于remark定理风格，在末尾自动加上一个$\\square$证毕符号。\n注意事项：若定理环境末尾为环境，证毕符号可能出现在独立一行，此时可用命令\\qedhere指定证毕符号的位置。\n表格环境\r#\r排班表格的基本环境为tabular，使用方法如下：\n\\begin{tabular}[align]{column_spec} ⟨item1⟩ \u0026amp; ⟨item2⟩ \u0026amp; … \\\\ \\hline ⟨item1⟩ \u0026amp; ⟨item2⟩ \u0026amp; … \\\\ \\end{tabular} 每行的单元格以\u0026amp;分隔，\\\\(或\\cr)切换新行。\n注意事项：直接tabular环境时会和文字混排。此时align控制表格的垂直对齐方式：t, b对应按顶部、底部对齐，其余情况为居中对齐。 通常表格很少与文字混排，而是放在table浮动体环境中，并使用\\caption命令加标题，此时align参数非必要。\n而column_spec指定列数及每列格式。常见的列格式如下：\n格式 描述 l/c/r 单元格左对齐/居中/右对齐 p{width} 单元格宽度固定为width(如6em)，自动换行 | 绘制竖线 @{str} 自定义内容 其中l/c/r/p个数之和为列数。\n单元格前后会额外添加间距，而@格式会取消间距。\n此外，$\\LaTeX$提供将参数重复的写法*{n}{arg}，如以下的写法等效：\n\\begin{tabular}{|c|c|c|c|c|p{4em}|p{4em}|} % 及 \\begin{tabular}{|*{5}{c|}*{2}{p{4em}|}} 分割线绘制\r#\r在表格每行的开头使用命令\\hline可以绘制分割线。此外\\cline{i-j}可以绘制第i列至第j列的横线。\n此外，宏包booktabs提供了科技论文中常用的三线表，提供\\toprule、\\midrule、\\bottomrule以绘制三条线，以及和\\cline对应的\\cmidrule命令。请尽量不要用其它横线和竖线。\n合并单元格\r#\r$\\LaTeX$按行排版表格，因此横向合并单元格较容易，命令为\n\\multicolumn{n}{column_spec}{text} 其中n为行数，column_spec为列格式，text为合并单元格的内容。其中column_spec仅允许出现一列。该命令也可用于修改某一个单元格的列样式。\n纵向合并需要用宏包multirow提供的命令\\multirow，其参数为n、width、text，其中width参数指定宽度，可以填*以使用自然宽度，其余参数与\\multicolumn相同。\n图片环境\r#\r该环境需要graphicx宏包支持。\n插入图片的命令如下：\n\\includegraphics[options]{filename} 其中options中的参数指定为key = value的形式，常用参数如下：\n参数 描述 width = (width) 缩放至宽度为(width) height = (height) 缩放至高度为(height) scale = (scale) 相对原尺寸缩放(scale)倍 angle = (angle) 逆时针旋转(angle)度 filename用相对路径或绝对路径表示，见使用本地字体一节。\nXeLaTeX原生支持.pdf, .eps矢量图，以及.jpg, .png, .bmp位图。\nsvg格式图片支持\r#\r由于LaTeX并不支持.svg格式文件的导入，因此需要将其转换为其它格式。\n此处推荐使用软件inkscape，安装后可以在命令行使用：\n$ inkscape sample.svg --export-eps=sample.eps # or $ inkscape sample.svg --export-pdf=sample.pdf 迷你页环境\r#\r$\\LaTeX$提供了生成独立页的环境minipage。命令如下：\n\\begin{minipage}[align][height][inner-align]{width} 其中align为迷你页与文字的混排格式(见表格环境)，height为高度，inner-align为内部的对齐方式，分为顶部t, 底部b, 居中c, 分散s, width为宽度。\n迷你页常在并排显示图片的时候使用，如并排显示两个图片，通常为以下格式(见并排浮动体与子浮动体)。\n\\begin{figure} \\centering \\begin{minipage}{.5\\textwidth} \\centering \\includegraphics[...]{figure1} \\caption{...} \\end{minipage} \\begin{minipage}{.5\\textwidth} \\centering \\includegraphics[...]{figure2} \\caption{...} \\end{minipage} \\end{figure} 浮动体环境\r#\r表格、图片等内容尺寸较大，会导致分页困难。 $\\LaTeX$为此引入的浮动体的机制，使得大块内容可以脱离原文，自动放置在合适位置。\n$\\LaTeX$预定义了两类浮动体环境table和figure，一般来说table放表格，figure放图片，但也可以放置任意内容。\n以table浮动体为例：\n\\begin{table}[placement] \\centering \\begin{tabular}{...} ... \\end{tabular} \\end{table} 参数placement提供浮动体允许排版的位置，见下表：\n参数 描述 h 此处 t 顶部 b 底部 p 单独成页 ! 改变部分参数，提高强制性 H 强制插入此处 其中H仅能单独使用，其余参数可以组合，如[ht!p]。\n注意事项：排版位置的选取与参数内符号顺序无关，总是以h-t-b-p的优先级决定位置。\n在双栏排版的环境下，$\\LaTeX$提供了table*和figure*环境，用于处理跨栏浮动体，用法与table和figure相同，但参数placement仅允许t和p。\n使用命令\\listoftables和\\listoffigures可以生成当前文件中的浮动体目录。\n浮动体可以用\\caption[]{}指定标题，其中长标题必须指定，短标题可选，会出现在目录中。\n并排浮动体与子浮动体\r#\r我们经常需要在浮动体中放置多个表格或图片，最简单的是并排放置，如\n\\begin{figure}{...} \\centering \\includegraphics[...]{figure1} \\qquad \\includegraphics[...]{figure2} \\\\ \\includegraphics[...]{figure3} \\caption{...} \\end{figure} 如需给并排图片添加标题，则需要借助minipage环境，见迷你页环境。\n如果需要给一个figure浮动体中的两个子图添加标题，则需要引入subcaption宏包(依赖于caption宏包)，具体请参考其文档。\n\\begin{figure} \\centering \\begin{subfigure}{...} \\centering \\includegraphics[...]{figure1.a} \\caption{...} \\end{subfigure} \\qquad \\begin{subfigure}{...} \\centering \\includegraphics[...]{figure1.b} \\caption{...} \\end{subfigure} \\end{figure} 并排图片和子图片的区别在于，并排图片为多个图片，而包含子图片的图片为单个图片。\n"},{"id":4,"href":"/latex-tutorial/zh/docs/how-to-write-a-well-structured-latex-file/","title":"如何写出一个结构化的LaTeX文档","section":"Docs","content":"\r\\(\\)\r文章结构\r#\r了解了如何输入文字内容后，我们可以尝试写出一个结构化的$\\LaTeX$文档。\nflowchart LR\rA(内容) --\u003e B(开端)\rA --\u003e C(正文)\rA --\u003e D(结尾)\rB --\u003e E(标题)\rB --\u003e F(前言)\rB --\u003e G(目录)\rC --\u003e H(章, 节, 小节)\rH --\u003e I(章节内容)\rD --\u003e J(附录)\rD --\u003e L(参考文献)\rD --\u003e M(索引)\r以上仅为示意图，可根据实际需要增加或删减部分。\n标题\r#\r$\\LaTeX$支持生成简单的标题页。\n需要在导言区提供标题、作者和日期信息：\n\\documentclass{article} ... \\title{标题\\thanks{致谢}} \\author{ 作者A\\thanks{its@pku.edu.cn} \\and 作者B\\thanks{通讯作者} } \\date{日期} \\begin{document} \\maketitle ... \\end{document} 其中前两个命令是必须的(不用\\title会报错；不用\\author会警告)，而\\date可选，不使用时默认为\\today(生成当前日期)。\n\\title和\\author可以使用\\thanks命令来添加致谢信息，会像脚注一样出现在页面下方。 此外\\author的参数可以使用\\and来并列多个作者。\n在信息给定后，就可以在正文区插入标题页：\\maketitle。\n目录与章节\r#\r一篇结构化、条理清晰的文档一定是层次分明的，可以通过命令分割为章、节、小节等：\n\\begin{document} \\chapter{chapter 1} \\section{section 1.1} \\subsection{subsection 1.1.1} \\subsubsection{subsubsection 1.1.1.1} \\paragraph{title} 内容 \\subparagraph{subtitle} 内容 ... \\section{section 1.2} ... \\chapter*{chapter 2} ... \\end{document} 其中\\chapter仅在report和book文档类有定义。这些命令会生成标题并自动编号。 此外$\\LaTeX$还提供了\\part指令，用来将文档分割为大块，但不影响章节的编号。\n章节命令还会在目录中添加条目。每个章节命令有两个变体：\n\\section[short]{title} % 以及 \\section*{title} 前者会在目录添加短标题，后者标题无编号，也不生成目录项。\n在正文部分使用命令\\tableofcontents会生成目录页。\n注意事项：可能需要多次编译以使目录正常显示。\n章节层级\r#\r$\\LaTeX$标准文档类对章节划分了层级：\n在article中part为0，section为1，依此类推；\n在report/book中part为-1，chapter为0，section为1，依此类推\nsecnumdepth计数器控制编号深度，在article中默认值为3，在report/book中默认值为2。$\\LaTeX$会将深度不大于secnumdepth的章节进行标号。\ntocdepth计数器控制目录深度，与secnumdepth默认值相同。\n我们可以通过命令\\setcounter{secnumdepth}{n}来将secnumdepth计数器的值设置为n， 如\\setcounter{secnumdepth}{5}会给全体章节标号， 而\\setcounter{tocdepth}{-1}在article中会不显示章节目录，在report/book中会仅显示part部分。\n章节计数器\r#\r如果我们需要修改章节的计数，以section为例， 可以使用命令\\setcounter{section}{n}，如\n\\begin{document} \\setcounter{section}{-2} \\section{section} % -1 \\section*{section} % null \\setcounter{section}{10} \\section*{section} % null \\section{section} % 11 \\section{section} % 12 \\end{document} 文档结构的划分\r#\r所有标准文档类都提供了\\appendix命令将正文和附录分开1。 在\\appendix以后最高一级章节使用拉丁字母编号，从A开始。\n此外，book文档类还提供了前言、正文、后记结构的划分命令：\nfrontmatter：前言部分，页码使用小写罗马数字；\\chapter不编号 mainmatter：正文部分，页码使用阿拉伯数字；\\chapter正常编号 backmatter：后记部分，页码使用阿拉伯数字；\\chapter不编号 以上命令可以与\\appendix共同使用，生成有前言、正文、附录、后记的文档。\n脚注与边注\r#\r使用\\footnote命令可在页面底部生成一个脚注，如：\n源代码\r#\rj\u0026#39;en ai découvert une démonstration véritablement merveilleuse. \\footnote{cette marge est trop étroite pour contenir.} 编译结果\r#\rj\u0026rsquo;en ai découvert une démonstration véritablement merveilleuse. 1\ncette marge est trop étroite pour contenir.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n在一些环境内(如表格环境)使用\\footnote无法正确生成脚注，我们可以分两步进行：\n在原地使用\\footnotemark计数\n在合适的位置用\\footnotetext生成脚注\n使用\\marginpar[left-margin]{right-margin}可以生成边注。 如果仅给定{right-margin}，则边注在奇偶页相同； 否则奇数页使用right-margin，偶数页使用left-margin。\n注意事项：边注较窄，建议不要写过多文字。可以使用\\footnotesize等命令设置较小的字号。\n引用与链接\r#\r引用是$\\LaTeX$强大排版功能的体现之一。\n在章节、公式、图表、定理等位置都支持引用。 使用\\label{label-name}命令后， 在别处可以使用\\ref{lable-name}生成引用的编号，或是\\pageref{label-name}生成页码。\n以下是一个例子： 源代码\r#\rA reference to this subsection \\label{sec:this} looks like: ``see section~\\ref{sec:this} on page~\\pageref{sec:this}.\u0026#39;\u0026#39; 编译结果\r#\rA reference to this subsection looks like: \u0026ldquo;see section 3.3 on page 22.\u0026rdquo;\n(数字为样例)\n注意事项：可能需要多次编译以生成正确交叉引用。\n\\label命令的使用位置为：\n章节标题：在下一个章节标题前的任意位置 行间公式：在每一行公式的任意位置 有序列表：在的任意位置 图表标题：紧接图表标题 定理环境：在环境内任意位置 注意事项：label仅对记编号的命令形式生效。\n使用超链接\r#\r电子文档最实用的需求之一就是超链接功能。$\\LaTeX$中实现这一功能的是hyperref宏包。\nhyperref宏包会将目录、引用、脚注、索引、参考文献等封装为超链接， 这也使其与其它宏包发生冲突的可能性增加。 为减少可能的冲突，习惯上将hyperref宏包放在其它宏包之后调用。\nhyperref宏包使用\\hypersetup配置参数。参数也可以作为选项在调用时指定：\n\\hypersetup{key1 = value1, ...} % or \\usepackage[key1 = value1, ...]{hyperref} 以下是常用的参数设置：\n参数 默认值 描述 colorlinks false true：链接文字带颜色；false：加上带颜色的边框 linkcolor red 一般内部链接颜色 citecolor green 文献引用颜色 urlcolor magenta 网页地址颜色 更多参数见其文档。此外也可以访问网页版的文档。\n使用hyperref宏包后，所有引用、参考文献、索引等都转化为超链接，也可以使用命令\n\\hyperref[label]{text} 来指定链接文字的样式，这里[]为必填项。\n宏包提供了直接书写超链接的指令，如：\n源代码\r#\r\\url{https://www.wikipedia.org} % or \\nolinkurl{https://www.wikepedia.org} % or \\href{https://www.wikipedia.org}{Wikipedia} 编译结果\r#\rhttps://www.wikipedia.org\nhttps://www.wikipedia.org(无跳转)\nWikipedia\n参考文献\r#\r$\\LaTeX$提供的参考文献和引用方式比较原始，需要用户自行书写参考文献列表，此处不介绍。 我们介绍两种方式。 bibtex数据库和biblatex宏包\nBIB$\\TeX$数据库\r#\rBIB$\\TeX$是目前最流行的参考文献数据组织格式之一。它的出现使我们摆脱手写参考文献条目的麻烦。我们还可以通过参考文献样式的支持，使同一份数据库生成不同样式的文献列表。\nBIB$\\TeX$以.bib为扩展名，内容使若干条文献条目，每个条目的格式为：\n@type{citation, key1 = {value1}, key2 = {value2}, keyn = {valuen} } 例如\n@book{knuth1984texbook, title={The texbook}, author={Knuth, Donald Ervin and Bibby, Duane}, volume={15}, year={1984}, publisher={Addison-Wesley Reading} } BIB$\\TeX$提供了几个预定义的样式，如plain, unsrt, alpha等，如果需要使用期刊模板的话，可能会提供自用样式。样式文件以.bst为扩展名。\n使用样式文件的方法为\\bibliographystyle{name}，其中name为样式文件的名称，不要带扩展名。\n如何获取文献数据\r#\r多数时候我们不必手写BIB$\\TeX$文献条目， 这是因为主流的文献数据库大都有简单的获取BIB$\\TeX$文献条目的方式。\n如Google Scholar在每篇文献底下的引用-\u0026gt;BibTeX存有文献条目。\n北京大学图书馆每篇文献右边的引用-\u0026gt;导出为BibTeX可以下载bib格式的数据库。\n完整的文献引用样例\r#\r% main.tex \\documentclass{article} \\bibliographystyle{plain} \\begin{document} \\section{section 1} Some excellent books, for example, \\cite{knuth1984texbook}. \\bibliography{books} % books.bib \\end{document} 在文件写好后，我们可以开始编译，命令如下：\n$ xelatex main $ bibtex main $ xelatex main $ xelatex main biblatex宏包\r#\rbiblatex宏包是基于$\\LaTeX$宏命令的参考文献解决方案， 提供便捷的格式控制和强大的排序、分类、筛选、多文献表等功能。\n因其对UTF-8和中文参考文献的良好支持，被国内较多$\\LaTeX$模板采用。\n使用方式如下：\n在导言区调用biblatex宏包。宏包支持以key = value形式指定参数，包括文献样式、排序规则等。\n在其后导言区使用\\addbibresource命令引入参考文献数据库，与BIB$\\TeX$传统方式不同的是，需要写完整的文件名。\n在正文使用\\cite命令引用参考文献。此外可用\\citeauthor, \\citeyear等单独引用作者与年份，也可用\\footcite以脚注式引用。\n在需要排版参考文献的位置使用\\printbibliography\nbiblatex自带的常用样式有authoryear, authortitle, verbose, gb7714-2015, ieee等。\n以下是一个样例\n% main.tex \\documentclass{article} \\usepackage[style=gb7714-2015]{biblatex} \\addbibresource{books.bib} \\begin{document} \\section{section 1} Some excellent books, for example, \\cite{knuth1984texbook}. \\printbibliography \\end{document} 与BIB$\\TeX$传统方式不同的是，biblatex使用biber程序处理参考文献，命令如下：\n$ xelatex main $ biber main $ xelatex main $ xelatex main 索引\r#\r书籍和大文档通常用索引来归纳关键词，方便用户查询。$\\LaTeX$借助makeindex程序完成对索引的排版。\n添加索引需要在导言区调用makeidx宏包，并使用\\makeindex命令开启索引收集。·\n\\usepackage{makeidx} \\makeindex 添加索引项的命令为\\index{index-entry}，常用写法如下：\n类型 样例 索引项 一级索引 test test, 1 二级索引 test!sub $\\text{sub}$, 3 三级索引 test!sub!subsub $\\text{subsub}$, 5 格式化索引 Mobius@\\\u0026quot;\u0026quot;obius $\\text{M\\\u0026quot;obius}$, 7 alpha@$\\alpha$ $\\alpha$, 9 bold@\\textbf{bold} $\\textbf{bold}$, 11 页码范围 morning|( $\\text{morning}$, 6-7 morning|) 其中!, @, |为特殊字符，使用\u0026quot;转义，而\u0026quot;使用\u0026quot;\u0026quot;输出。索引至多三级，以上命令可组合使用。\n在需要输出索引的地方(如正文区末尾)使用\\printindex命令。\n编译命令如下：\n$ xelatex main % 生成索引记录文件main.idx $ makeindex main.idx % 生成索引文件main.ind $ xelatex main % 生成索引列表 详情可以查看makeindex宏包的文档。\n使用\\include和\\input组织文件\r#\r当$\\TeX$文档比较复杂(或是比较长)时，单个源文件的修改、校对、编译会变得十分困难。 此时，将源文件分割为若干子文件，如将每章内容单独写在一个文件中，会极大地简化工作。\n$\\LaTeX$提供两个命令\\include和\\input以在源代码中插入文件：\n\\include{filename} % \\input{filename} 若引入文件和主文件不在同一个目录中，则要使用相对或绝对路径，见使用本地字体。\n两个命令各有特点：\n\\include会在读入文件前另起一页，\\input则不会。\n在被\\include引用的文件中不能再次使用\\include命令(包括被\\input包含的文件)；而\\input可以任意使用，相当于直接在文件中插入被引用的文件。\n在导言区使用指令\\includeonly{filename1, filename2, ...}可以仅载入指定文件。\n以下是一个使用\\include和\\input文件树结构示例：\n% main.tex \\documentclass{book} \\include{header} \\begin{document} \\include{part1} \\include{part2} \\appendix \\include{appendix} \\end{document} % part1.tex \\part{Part I} \\input{chapter1} \\input{chapter2} % part2.tex \\part{Part II} \\input{chapter3} \\input{chapter4} 标准文档类的主文件样例\r#\rarticle\r#\r\\documentclass{article} \\title{Title} \\author{Author} \\date{\\today} \\begin{document} \\maketitle \\begin{abstract} ... \\end{abstract} \\tableofcontents \\include{section1} \\include{section2} \\appendix \\include{appendix} \\bibliography{books} \\end{document} book\r#\r\\documentclass{book} \\usepackage{makeidx} \\makeindex \\usepackage[style=gb7714-2015]{biblatex} \\addbibresource{bibliography.bib} \\title{Title} \\author{Author} \\date{\\today} \\begin{document} \\frontmatter \\maketitle \\include{preface} \\tableofcontents \\mainmatter \\include{chapter1} \\include{chapter2} ... \\appendix \\include{appendixA} ... \\backmatter \\include{epilogue} \\printbibliography \\printindex \\end{document} 部分文档可能采用\\begin{appendix}...\\end{appendix}的写法，效果相同，但并不规范。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":5,"href":"/latex-tutorial/zh/docs/typesetting-math/","title":"排版数学公式","section":"Docs","content":"\r\\(\\)\r使用$\\LaTeX$排版数学公式\r#\r为较好地支持排版数学公式，需要使用AMS-$\\LaTeX$宏集。 AMS-$\\LaTeX$宏集是一个包含了若干类和宏包的数学排版拓展，我们主要使用amsmath宏包。 以下的命令总是假定已引用该宏包。\n行内公式\r#\r数学公式的排版分为两种：其一是与文字混排，称为行内公式；其二是单独成行，称为行间公式。\n行内公式是由一对$包裹($\\TeX$语法)或是由\\(与\\)包裹($\\LaTeX$语法)的环境：\n源代码\r#\r设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则$a^2+b^2=c^2$。 编译结果\r#\r设直角三角形的两条直角边长度分别为$a$和$b$，斜边长度为$c$，则$a^2+b^2=c^2$。\r也可以使用\\begin{math}和\\end{math}来包裹，甚至可以混用语法：$a\\)。 但这两种都不推荐。\n我们建议全部使用$\\TeX$语法(即使用$包裹)，这样便于阅读。\n行间公式\r#\r若需要将较长的公式独立于段落展示，需要使用环境equation：\n源代码\r#\r设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \\begin{equation} a^2 + b^2 = c^2 \\end{equation} 编译结果\r#\r设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \\begin{equation} a^2 + b^2 = c^2 \\end{equation}\requation环境会为公式生成编号，可以使用\\label, \\ref进行引用。 \\tag{}可为公式修改编号。\n如果不需要编号，可以使用\\notag命令。此外也有更直接的方式：\n使用equation*环境；\n使用displaymath环境；\n使用一对$$包裹($\\TeX$语法)或者用\\[与\\]包裹($\\LaTeX$语法)。\n注意事项：请尽量不要使用$$包裹来生成行间公式，更不要混合使用语法。其并不支持如fleqn等命令(见文档导言)。此外还有其它支持问题，可以参考讨论Why is \\[ ... \\] preferable to $$ ... $$?。\n源代码\r#\r设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \\begin{equation*} a^2 + b^2 = c^2 \\end{equation*} 或者更简单一些： \\[ a^2 + b^2 = c^2 \\] 编译结果\r#\r设直角三角形的两条直角边长度分别为$a$和$b$， 斜边长度为$c$，则 \\[ a^2 + b^2 = c^2 \\] 或者更简单一些： \\[ a^2 + b^2 = c^2 \\]\r数学模式\r#\r被数学环境包裹的片段进入数学模式，其与文本模式有差异，如：\n空格将被忽略，由表达式生成间距，也可以使用\\,, \\quad等手动调整间距；\n不允许有空行；\n所有字母被当作变量处理，间距与文本模式不一致，亦不会生成单词间的空格。 如须嵌入文本模式，可以使用\\text{}, \\textit{}等命令。\n源代码\r#\r$\\forall x \\in \\mathbb R: \\qquad x^2 \\geq 0$ $x^2 \\geq 0 \\qquad \\text{for all } x \\in \\mathbb R$ 编译结果\r#\r$\\forall x \\in \\mathbb R: \\qquad x^2 \\geq 0$\n$x^2 \\geq 0 \\qquad \\text{for all } x \\in \\mathbb R$\n注意事项：请不要滥用\\text命令进入文本模式，更不要做无必要的数学环境和文本环境的多层嵌套。\n常用数学命令表\r#\r注：由于表格较宽，建议使用电脑浏览以获取最佳效果。\n希腊字母\r#\r命令 \\alpha \\beta \\gamma \\delta \\epsilon \\varepsilon \\zeta \\eta \\theta \\vartheta \\iota 字母 $\\alpha$ $\\beta$ $\\gamma$ $\\delta$ $\\epsilon$ $\\varepsilon$ $\\zeta$ $\\eta$ $\\theta$ $\\vartheta$ $\\iota$ 命令 \\kappa \\lambda \\mu \\nu \\xi \\pi \\varpi \\rho \\varrho \\sigma \\varsigma 字母 $\\kappa$ $\\lambda$ $\\mu$ $\\nu$ $\\xi$ $\\pi$ $\\varpi$ $\\rho$ $\\varrho$ $\\sigma$ $\\varsigma$ 命令 \\tau \\upsilon \\phi \\varphi \\chi \\psi \\omega 字母 $\\tau$ $\\upsilon$ $\\phi$ $\\varphi$ $\\chi$ $\\psi$ $\\omega$ 命令 \\Gamma \\Delta \\Theta \\Lambda \\Xi \\Pi \\Sigma \\Upsilon \\Phi \\Psi \\Omega 字母 $\\Gamma$ $\\Delta$ $\\Theta$ $\\Lambda$ $\\Xi$ $\\Pi$ $\\Sigma$ $\\Upsilon$ $\\Phi$ $\\Psi$ $\\Omega$ 数学字体\r#\r命令 描述 大写字母 小写字母 数字 \\mathnormal (默认) default $ABCDEFGHIJKLMN$$OPQRSTUVWXYZ$ $abcdefghijklmnopqrstuvwxyz$ $0123456789$ \\mathrm Roman $\\mathrm{ABCDEFGHIJKLMN}$$\\mathrm{OPQRSTUVWXYZ}$ $\\mathrm{abcdefghijklmn}$$\\mathrm{opqrstuvwxyz}$ $\\mathrm{0123456789}$ \\mathit Italic $\\mathit{ABCDEFGHIJKLMN}$$\\mathit{OPQRSTUVWXYZ}$ $\\mathit{abcdefghijklmn}$$\\mathit{opqrstuvwxyz}$ $\\mathit{0123456789}$ \\mathcal Calligraphic $\\mathcal{ABCDEFGHIJKLMN}$$\\mathcal{OPQRSTUVWXYZ}$ $\\mathcal{abcdefghijklmn}$$\\mathcal{opqrstuvwxyz}$ $\\mathcal{0123456789}$ \\mathfrak Frakutr $\\mathfrak{ABCDEFGHIJKLMN}$$\\mathfrak{OPQRSTUVWXYZ}$ $\\mathfrak{abcdefghijklmn}$$\\mathfrak{opqrstuvwxyz}$ $\\mathfrak{0123456789}$ \\mathbb Blackboard bold $\\mathbb{ABCDEFGHIJKLMN}$$\\mathbb{OPQRSTUVWXYZ}$ $\\mathbb{abcdefghijklmn}$$\\mathbb{opqrstuvwxyz}$ $\\mathbb{0123456789}$ \\mathbf Boldface $\\mathbf{ABCDEFGHIJKLMN}$$\\mathbf{OPQRSTUVWXYZ}$ $\\mathbf{abcdefghijklmn}$$\\mathbf{opqrstuvwxyz}$ $\\mathbf{0123456789}$ \\mathtt Typewriter $\\mathtt{ABCDEFGHIJKLMN}$$\\mathtt{OPQRSTUVWXYZ}$ $\\mathtt{abcdefghijklmn}$$\\mathtt{opqrstuvwxyz}$ $\\mathtt{0123456789}$ \\mathsf Sans Serif $\\mathsf{ABCDEFGHIJKLMN}$$\\mathsf{OPQRSTUVWXYZ}$ $\\mathsf{abcdefghijklmn}$$\\mathsf{opqrstuvwxyz}$ $\\mathsf{0123456789}$ 二元关系符\r#\r\u0026lt; \u0026gt; = \\leq (or \\le) \\geq (or \\ge) \\equiv \\ll \\gg \\doteq \\prec \\succ \\sim $\u0026lt;$ $\u0026gt;$ $=$ $\\leq$ $\\geq$ $\\equiv$ $\\ll$ $\\gg$ $\\doteq$ $\\prec$ $\\succ$ $\\sim$ \\preceq \\succeq \\simeq \\subset \\supset \\approx \\subseteq \\supseteq \\cong \\sqsubset \\sqsupset \\Join $\\preceq$ $\\succeq$ $\\simeq$ $\\subset$ $\\supset$ $\\approx$ $\\subseteq$ $\\supseteq$ $\\cong$ $\\sqsubset$ $\\sqsupset$ $\\Join$ \\sqsubseteq \\sqsupseteq \\bowtie \\in \\ni (or \\owns) \\propto \\vdash \\dashv \\models \\mid \\parallel \\perp $\\sqsubseteq$ $\\sqsupseteq$ $\\bowtie$ $\\in$ $\\ni$ $\\propto$ $\\vdash$ $\\dashv$ $\\models$ $\\mid$ $\\parallel$ $\\perp$ \\smile \\frown \\asymp : \\notin \\neq (or \\ne) $\\smile$ $\\frown$ $\\asymp$ $:$ $\\notin$ $\\neq$ 二元运算符\r#\r+ - \\pm \\mp riangleleft \\triangleright \\cdot \\div \\times \\setminus \\star \\cup $+$ $-$ $\\pm$ $\\mp$ $\\triangleleft$ $\\triangleright$ $\\cdot$ $\\div$ $\\times$ $\\setminus$ $\\star$ $\\cup$ \\cap \\ast \\sqcup \\sqcap \\circ \\vee (or \\lor) \\wedge (or \\land) \\bullet \\oplus \\ominus \\diamond \\odot $\\cap$ $\\ast$ $\\sqcup$ $\\sqcap$ $\\circ$ $\\vee$ $\\wedge$ $\\bullet$ $\\oplus$ $\\ominus$ $\\diamond$ $\\odot$ \\oslash \\uplus \\otimes \\bigcirc \\amalg \\bigtriangleup \\bigtriangledown \\dagger \\lhd \\rhd \\ddagger \\unlhd $\\oslash$ $\\uplus$ $\\otimes$ $\\bigcirc$ $\\amalg$ $\\bigtriangleup$ $\\bigtriangledown$ $\\dagger$ $\\lhd$ $\\rhd$ $\\ddagger$ $\\unlhd$ \\unrhd \\wr \\dotplus \\centerdot \\ltimes \\rtimes $\\unrhd$ $\\wr$ $\\dotplus$ $\\centerdot$ $\\ltimes$ $\\rtimes$ 分式使用命令\\frac{分子}{分母}书写，在行间公式中正常显示，而在行内公式中被压缩以适应行高。 可以使用\\tfrac与\\dfrac来获得行内和行间的分式风格。 此外我们也常使用1/2来表示分式，这在部分情况下会较为美观。\n源代码\r#\r$1/2 \\qquad \\frac{1}{2} \\qquad \\dfrac{1}{2}$ \\begin{equation*} 3/8 \\qquad \\frac{3}{8} \\qquad \\tfrac{3}{8} \\end{equation*} 编译结果\r#\r$1/2 \\qquad \\frac{1}{2} \\qquad \\dfrac{1}{2}$ \\[3/8 \\qquad \\frac{3}{8} \\qquad \\tfrac{3}{8}\\]\r对于模函数mod，使用\\bmod来表示mod运算，而\\pmod表示同余式等，如\n源代码\r#\r$a \\bmod b$, $x \\equiv a \\pmod b$ 编译结果\r#\r$a \\bmod b$, $x \\equiv a \\pmod b$\r箭头\r#\r\\leftarrow (or \\gets) \\longleftarrow \\rightarrow (or \\to) \\longrightarrow \\leftrightarrow \\longleftrightarrow $\\leftarrow$ $\\longleftarrow$ $\\rightarrow$ $\\longrightarrow$ $\\leftrightarrow$ $\\longleftrightarrow$ \\Leftarrow \\Longleftarrow \\Rightarrow \\Longrightarrow \\Leftrightarrow \\Longleftrightarrow $\\Leftarrow$ $\\Longleftarrow$ $\\Rightarrow$ $\\Longrightarrow$ $\\Leftrightarrow$ $\\Longleftrightarrow$ \\mapsto \\longmapsto \\hookleftarrow \\hookrightarrow \\leftharpoonup \\rightharpoonup $\\mapsto$ $\\longmapsto$ $\\hookleftarrow$ $\\hookrightarrow$ $\\leftharpoonup$ $\\rightharpoonup$ \\leftharpoondown \\rightharpoondown \\rightleftharpoons \\iff \\uparrow \\downarrow $\\leftharpoondown$ $\\rightharpoondown$ $\\rightleftharpoons$ $\\iff$ $\\uparrow$ $\\downarrow$ \\updownarrow \\Uparrow \\Downarrow \\Updownarrow \\nearrow \\searrow $\\updownarrow$ $\\Uparrow$ $\\Downarrow$ $\\Updownarrow$ $\\nearrow$ $\\searrow$ \\swarrow \\nwarrow \\leadsto $\\swarrow$ $\\nwarrow$ $\\leadsto$ 分隔符\r#\r( ) [ (or \\lbrack) ] (or \\rbrack) \\{ (or \\lbrace) \\} (or \\rbrace) \\langle \\rangle $($ $)$ $[$ $]$ $\\{$ $\\}$ $\\langle$ $\\rangle$ | (or \\vert) \\| (or \\Vert) / \\backslash \\lfloor \\rfloor \\lceil \\rceil $|$ $\\|$ $/$ $\\backslash$ $\\lfloor$ $\\rfloor$ $\\lceil$ $\\rceil$ 可以在两个分隔符前分别用\\left与\\right命令来根据其间包裹内容大小自动调整分隔符大小。 对于单边的分隔符，可以使用\\left.或\\right.来使另一边不可见：\n源代码\r#\r\\begin{equation*} \\left. \\left(\\alpha + \\frac{1}{\\beta}\\right)^3 \\right|_{\\alpha = 1, \\beta = -1} = 0 \\end{equation*} 编译结果\r#\r\\[\\left. \\left(\\alpha + \\frac{1}{\\beta}\\right)^3 \\right|_{\\alpha = 1, \\beta = -1} = 0\\]\r杂项\r#\r\\dots \\cdots \\vdots \\ddots \\hbar \\imath \\jmath \\ell \\Re $\\dots$ $\\cdots$ $\\vdots$ $\\ddots$ $\\hbar$ $\\imath$ $\\jmath$ $\\ell$ $\\Re$ \\Im \\aleph \\wp \\forall \\exists \\mho \\partial \\prime \\varnothing $\\Im$ $\\aleph$ $\\wp$ $\\forall$ $\\exists$ $\\mho$ $\\partial$ $\\prime$ $\\varnothing$ \\emptyset \\infty \\nabla \\triangle \\Box \\Diamond \\bot \\top \\angle $\\emptyset$ $\\infty$ $\\nabla$ $\\triangle$ $\\Box$ $\\Diamond$ $\\bot$ $\\top$ $\\angle$ \\surd \\diamondsuit \\heartsuit \\clubsuit \\spadesuit \\neg (or \\lnot) \\flat \\natural \\sharp $\\surd$ $\\diamondsuit$ $\\heartsuit$ $\\clubsuit$ $\\spadesuit$ $\\neg$ $\\flat$ $\\natural$ $\\sharp$ 算符\r#\r\\sin \\cos \\tan \\cot \\sec \\arcsin \\arccos \\arctan \\arg \\csc \\sinh \\cosh \\tanh \\coth \\exp \\log \\lg \\ln \\dim \\ker \\hom \\deg \\max1 \\min \\det \\Pr \\gcd \\inf \\liminf \\sup \\limsup \\lim 对于未定义的算符，可以用\\DeclareMathOperator{}{}命令定义，也可以用带星号的版本以支持上下限。\n源代码\r#\r\\DeclareMathOperator{\\argh}{argh} \\DeclareMathOperator*{\\nut}{Nut} \\begin{equation*} 3 \\argh = 2 \\nut_{x = 1} \\end{equation*} 编译结果\r#\r\\[ 3 \\operatorname{argh} = 2 \\operatorname*{Nut} \\limits_{x = 1} \\]\r巨算符\r#\r\\sum \\prod \\coprod \\int \\oint \\bigcup \\bigcap \\bigsqcup $\\sum$ $\\prod$ $\\coprod$ $\\int$ $\\oint$ $\\bigcup$ $\\bigcap$ $\\bigsqcup$ \\bigvee \\bigwedge \\biguplus \\bigodot \\bigoplus \\bigotimes $\\bigvee$ $\\bigwedge$ $\\biguplus$ $\\bigodot$ $\\bigoplus$ $\\bigotimes$ 巨算符在行内与行间的大小和形状有一定差异，在行内上下标位于右方，在行间上下标位于上下方。 可以使用\\limits和\\nolimits调整。\n在连用多个积分号时可能间隔较大，可以用\\!调整，或者使用由amsmath提供的命令，如 \\iint, \\iiint, \\iiiint和\\idotsint等。\n重音\r#\r\\hat{a} \\grave{a} \\bar{a} \\acute{a} \\mathring{a} \\check{a} $\\hat{a}$ $\\grave{a}$ $\\bar{a}$ $\\acute{a}$ $\\mathring{a}$ $\\check{a}$ \\dot{a} \\vec{a} \\breve{a} \\tilde{a} \\ddot{a} a\u0026rsquo; (= a^{\\prime}) $\\dot{a}$ $\\vec{a}$ $\\breve{a}$ $\\tilde{a}$ $\\ddot{a}$ $a^{\\prime}$ \\widehat{AAA} \\widetilde{AAA} \\overline{AAA} \\underline{AAA} \\overrightarrow{AAA} \\underrightarrow{AAA} $\\widehat{AAA}$ $\\widetilde{AAA}$ $\\overline{AAA}$ $\\underline{AAA}$ $\\overrightarrow{AAA}$ $\\underrightarrow{AAA}$ \\overleftarrow{AAA} \\underleftarrow{AAA} \\overleftrightarrow{AAA} \\underleftrightarrow{AAA} \\underbrace{AAA}_{A} \\overbrace{AAA}^A $\\overleftarrow{AAA}$ $\\underleftarrow{AAA}$ $\\overleftrightarrow{AAA}$ $\\underleftrightarrow{AAA}$ $\\underbrace{AAA}_{A}$ $\\overbrace{AAA}^A$ \\max及其后的算符使用上下限。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":6,"href":"/latex-tutorial/zh/docs/latex-editor/","title":"编辑器推荐","section":"Docs","content":"\r\\(\\)\r编辑器推荐\r#\r一个好用的$\\LaTeX$编辑器无疑会极大地提高输入和编译效率，也可以让使用者有一个好的心情，不用一直面对终端手动输入指令(虽然部分人也喜欢这么做)。\n本篇推荐两个笔者长期使用的编辑器，并介绍部分特性与使用方法。 本文并不致力于写成编辑器使用指南，因此主要介绍其中与$\\LaTeX$相关的部分。\n此外，你也可以使用你喜欢的编辑器探索如何提升$\\LaTeX$文档的编辑体验。\nVisual Studio Code\r#\rVisual Studio Code (简称VS Code)是由微软公司开发的跨平台免费开源的编辑器，主要用于编写程序，预设支持多数常用语言，也包括$\\LaTeX$。 在2021年问答网站Stack Overflow的开发环境调研中，其获得了71.06%的推荐率，远超其后的Visual Studio (33.03%)等。\nVS Code支持通过扩展增强功能，在其扩展商店中的LaTeX Workshop可以极大地提升编辑器中$\\LaTeX$文件的编辑和编译效率。\n以下介绍其主要功能。更详细的介绍可以查看Features和其Wiki。\n一般代码支持\r#\r支持$\\LaTeX$, $\\LaTeX$3, Bib$\\TeX$语法高亮、代码折叠、代码格式化。\n自动编译\r#\rLaTeX Workshop默认会在你保存文件时自动编译$\\LaTeX$文档， 因此可以告别生成引用、文献、索引等多次编译的烦恼。\n如果使用\\input, \\include来形成文件树，其会智能地在保存树中任意文件时重新编译主文件。\n此外，可以选择删除编译过程中出现的辅助文件。\n该设定可以关闭。\nPDF预览和SyncTeX支持\r#\rLaTeX Workshop支持在VS Code内与外部PDF查看器实时预览编译出的PDF文档。\n此外，支持通过SyncTeX从文档中的\\label和\\ref处跳转PDF至相应部分，或是从PDF任意部分跳转至生成该部分的一行(同样支持访问文件树)。\nSnippets, Shortcuts 与 IntelliSense\r#\r智能提示宏命令(包含可能的参数类型)，\\cite和\\ref引用内容，以及\\input, \\include, \\includegraphics等文件导入路径，可以选择并按tab键补完。\n智能生成列举环境中的\\item，\n更方便地给文本提供\\emph等样式。\n此外，可以通过VS Code自定义代码片段，形成适合个人的代码片段。\n数学公式和TikZ绘图，图片预览\r#\r将光标置于数学公式与TikZ绘图，或图片插入处可以看到渲染效果。\n错误分析\r#\r将编译报错显示于文件中。\n大纲，代码片段插入\r#\r在资源管理器-\u0026gt;大纲处(或$\\TeX$-\u0026gt;STRUCTURE处)可以看到树状组织的全部章节和标签，支持点击跳转。\n在$\\TeX$-\u0026gt;SNIPPET VIEW处可以根据符号插入对应的命令，以及常用的TikZ绘图片段。\n其它插件\r#\r你也可以在扩展商店搜索自己喜欢的扩展。 如笔者会使用hypersnips(借助Vim中的王牌插件Ultisnips灵感创作)以根据上下文(context)快速自动展开代码片段。 由于其目前为beta版，存在部分问题，故此处不介绍。\nVIM\r#\rVim是从vi发展出的开源自由文本编辑器，于1991年发布，可以在终端使用，是类Unix系统用户最喜欢的编辑器。其以学习曲线陡峭著称，但一旦掌握后能大幅提高编辑效率。\n笔者因著名文章How I\u0026rsquo;m able to take notes in mathematics lectures using LaTeX and Vim入坑。 虽有差生文具多之嫌，但经过测试确实能够与课堂同步做笔记(而笔者并不喜欢做笔记)，可以在无需思考的情况下高速输出文字。\n本部分推荐主要参考上述文章，此外会增加部分个人的使用体验。\n"}]